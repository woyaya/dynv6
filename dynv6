#!/bin/sh

usage(){
	echo ""
	echo "Usage: $0 [-i interface] [-6 [-n netmask_length] ] [-4] -t token domain1 [domain2 ...]"
	echo "\t-i interface: ethernet interface"
	echo "\t-6 ipv6"
	echo "\t-n netmask_length: netmask length of ipv6 address"
	echo "\t-4 ipv4"
	echo "\t-t token: from dynv6.com"
	exit 1 # Exit script after printing help
}
ipv6_get_addr_linux(){
  local dev
  local address_list
  if [ -n "$1" ]; then
    dev="dev $1"
  else
    dev=""
  fi
  #Latest IPv6 address depends on "preferred_lft"
  address_list=`ip -6 addr list scope global $dev | grep "^ *inet6 " -A 1 | sed '$!N;s/\n/ /'`
  address_list=`echo "$address_list" | sed -n 's/.*inet6 \([0-9a-f:]\+\).*preferred_lft \([0-9]\+\)sec/\2 \1/p'`
  echo "$address_list" | awk '{printf ("%016d %s\n",$1,$2)}' | sort -r | sed 's/.* //;q'
}
ipv6_get_addr_macos(){
  local dev
  local address_list
  dev=$1
  address_list=`/sbin/ifconfig -L $dev | grep '^\t*inet6.*pltime'`
  address_list=`echo "$address_list" | sed 's/.*inet6 \([0-9a-f:]*\) .*pltime \([0-9]*\) .*/\2 \1/'`
  echo "$address_list" | awk '{printf ("%016d %s\n",$1,$2)}' | sort -r | sed 's/.* //;q'
}

[ $# -lt 3 ] && usage
interface=eth0
netmask=128

while getopts "i:t:n:64" opt
do
	case "$opt" in
	i ) device="$OPTARG";;
	n ) netmask="$OPTARG";;
	t ) token="$OPTARG";;
	6 ) ipv6=1;;
	4 ) ipv4=1;;
	? ) usage;;
	esac
done
shift $((OPTIND-1))

domains="$@"
[ -z "$domains" -o -z "$token" ] && {
	echo "No domain or token"
	usage
}
####
if [ -e /usr/bin/curl ]; then
  bin="curl -fsS"
elif [ -e /usr/bin/wget ]; then
  bin="wget -O-"
else
  echo "neither curl nor wget found"
  exit 1
fi

file=/tmp/.dynv6.addv6
set -e

[ -n "$ipv6" ] && {
  OS=`uname`
  case "$OS" in
  Linux)
    address=`ipv6_get_addr_linux $device`
  ;;
  Darwin)
    address=`ipv6_get_addr_macos $device`
  ;;
  *)
    echo "Unsupported OS: $OS"
    exit 1
  ;;
  esac
  if [ -z "$address" ]; then
    echo "no IPv6 address found"
    exit 1
  fi
  # address with netmask
  current=$address/$netmask

  [ -e $file ] && old=`cat $file`
  if [ "$old" = "$current" ]; then
    echo "IPv6 address unchanged"
    exit
  fi
}

set +e

# send addresses to dynv6
FAIL=0
for hostname in $domains
do
	[ -n "$ipv6" ] && {
		#echo "$bin \"https://dynv6.com/api/update?hostname=$hostname&ipv6=$current&token=$token\""
		$bin "https://dynv6.com/api/update?hostname=$hostname&ipv6=$current&token=$token"
		[ $? = 0 ] || {
			FAIL=1
			break
		}
	}
	[ -n "$ipv4" ] && {
		#echo "$bin \"http://ipv4.dynv6.com/api/update?hostname=$hostname&ipv4=auto&token=$token\""
		$bin "http://ipv4.dynv6.com/api/update?hostname=$hostname&ipv4=auto&token=$token"
		[ $? = 0 ] || {
			FAIL=1
			break
		}
	}
done
# Check result
[ "$FAIL" = "0" ] && {
	[ -n "$current" ] && echo $current > $file
	exit 0
} 
[ "$FAIL" = "1" ] && {
	echo "Update domain Fail: device($device) ipv6($ipv6) ipv4($ipv4) token:($token)"
	echo "\t$bin \"https://dynv6.com/api/update?hostname=$hostname&ipv6=$current&token=$token\""
	echo "\t$bin \"http://ipv4.dynv6.com/api/update?hostname=$hostname&ipv4=auto&token=$token\""
	logger -i -t dynv6 "Update domain for dynv6 fail"
	rm -rf $file
}

